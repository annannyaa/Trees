Given a generic tree, print the input tree in level wise order.
For printing a node with data N, you need to follow the exact format -
Sample Input 1:
10 3 20 30 40 2 40 50 0 0 0 0 
Sample Output 1:
10:20,30,40
20:40,50
30:
40:
40:
50:
Following is the structure for the TreeNode class

    template <typename T>
    class TreeNode {
     public:
        T data;
        vector<TreeNode<T>*> children;
    
        TreeNode(T data) {
            this->data = data;
        }
    
        ~TreeNode() {
            for (int i = 0; i < children.size(); i++) {
                delete children[i];
            }
        }
    };
****************************************************************
#include <iostream>
#include <vector>
using namespace std;
#include<queue>
void printLevelWise(TreeNode<int>* root) {
    // Write your code here
if(root->data==NULL){
    return ;
}
  queue<TreeNode<int>*> pendingNodes;
	pendingNodes.push(root);
while(pendingNodes.size()!=0){
    TreeNode <int>*front=pendingNodes.front();
    pendingNodes.pop();
     cout<<front->data<<":";
	for(int i=0;i<front->children.size();i++){
		if(i==front->children.size()-1){//CHANGE LOL
            cout<<front->children[i]->data;
        }
   		else{
            cout<<front->children[i]->data<<',';}
        
    	pendingNodes.push(front->children[i]);
    
}
cout<<endl;}
}
int main() {
    TreeNode<int>* root = takeInputLevelWise();
    printLevelWise(root);
}
